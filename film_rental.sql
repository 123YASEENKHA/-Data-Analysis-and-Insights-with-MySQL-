use film_rental;
show tables;
select * from actor;
select * from address;
select * from category;
select * from city;
select * from country;
select * from customer;
select * from film;
select * from film_actor;
select * from film_category;
select * from inventory;
select * from language;
select * from payment;
select * from rental;
select * from staff;
select * from store;


# 1: What is the total revenue generated from all rentals in the database?
select sum(amount) as total_revenue 
from payment;

# 2: How many rentals were made in each month_name?

SELECT MONTHNAME(rental_date) AS month_name, COUNT(*) AS rental_count
FROM Rental
GROUP BY MONTHNAME(rental_date);

# 3: What is the rental rate of the film with the longest title in the database?

select * from film;


SELECT rental_rate
FROM Film
ORDER BY LENGTH(title) DESC
LIMIT 1;


# 4: What is the average rental rate for films that were taken from the last 30 days from the date("2005-05-05 22:04:30")?

SELECT *
FROM Film;

SELECT AVG(rental_rate) AS avg_rental_rate
FROM Film
WHERE last_update >= DATE_SUB('2005-05-05 22:04:30', INTERVAL 30 DAY);

#5. What is the most popular category of films in terms of the number of rentals? (3 Marks)

SELECT c.name AS category, COUNT(*) AS rental_count
FROM Film_Category fc
JOIN Category c ON fc.category_id = c.category_id
GROUP BY c.name ORDER BY rental_count DESC
LIMIT 1;


#6. Find the longest movie duration from the list of films that have not been rented by any customer. (3 Marks)

SELECT MAX(length) AS longest_duration
FROM Film
WHERE film_id NOT IN (SELECT DISTINCT inventory_id FROM Rental);


#7. What is the average rental rate for films, broken down by category? (3 Marks)

SELECT c.name AS category, AVG(f.rental_rate) AS avg_rental_rate
FROM Film f
JOIN Film_Category fc ON f.film_id = fc.film_id
JOIN Category c ON fc.category_id = c.category_id
GROUP BY c.name;


#8. What is the total revenue generated from rentals for each actor in the database? (3 Marks)

SELECT a.actor_id, a.first_name, a.last_name, SUM(p.amount) AS total_revenue
FROM Actor a
JOIN Film_Actor fa ON a.actor_id = fa.actor_id
JOIN Film f ON fa.film_id = f.film_id
JOIN Inventory i ON f.film_id = i.film_id
JOIN Rental r ON i.inventory_id = r.inventory_id
JOIN Payment p ON r.rental_id = p.rental_id
GROUP BY a.actor_id, a.first_name, a.last_name;


#9. Show all the actresses who worked in a film having a "Wrestler" in the description. (3 Marks)

SELECT DISTINCT a.first_name, a.last_name
FROM Actor as a
JOIN Film_Actor as fa ON a.actor_id = fa.actor_id
JOIN Film as f ON fa.film_id = f.film_id
WHERE f.description LIKE '%Wrestler%' ;


#10. Which customers have rented the same film more than once? (3 Marks)

SELECT c.customer_id, c.first_name, c.last_name, r.inventory_id, COUNT(*) AS rental_count
FROM Customer as c
JOIN Rental as r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
HAVING rental_count > 1;



#11. How many films in the comedy category have a rental rate higher than the average rental rate? (3 Marks)

SELECT COUNT(*) AS comedy_films_count
FROM Film f
JOIN Film_Category fc ON f.film_id = fc.film_id
JOIN Category c ON fc.category_id = c.category_id
WHERE c.name = 'Comedy' AND f.rental_rate > (SELECT AVG(rental_rate) FROM Film);


#12. Which films have been rented the most by customers living in each city? 

SELECT c.city, f.title, COUNT(*) AS rental_count
FROM City c
JOIN Address a ON c.city_id = a.city_id
JOIN Customer cust ON a.address_id = cust.address_id
JOIN Rental r ON cust.customer_id = r.customer_id
JOIN Inventory i ON r.inventory_id = i.inventory_id
JOIN Film f ON i.film_id = f.film_id
GROUP BY c.city, f.title
ORDER BY c.city, rental_count DESC;


#13. What is the total amount spent by customers whose rental payments exceed $200?

SELECT Customer.customer_id,SUM(Payment.amount) AS total_amount_spent
FROM Customer
JOIN Payment ON Customer.customer_id = Payment.customer_id
WHERE Payment.amount>=200
GROUP BY Customer.customer_id;


#14. Display the fields which are having foreign key constraints related to the "rental" table. [Hint: using Information_schema]

SELECT TABLE_NAME, COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE REFERENCED_TABLE_NAME = 'Rental';



#15. Create a View for the total revenue generated by each staff member, broken down by store city with the country name.

CREATE VIEW StaffRevenueView AS
SELECT s.staff_id, s.first_name, s.last_name, c.city, co.country, SUM(p.amount) AS total_revenue
FROM Staff as s
JOIN Store as sto ON s.store_id = sto.store_id
JOIN Address as a ON sto.address_id = a.address_id
JOIN City as c ON a.city_id = c.city_id
JOIN Country as co ON c.country_id = co.country_id
JOIN Payment as p ON s.staff_id = p.staff_id
GROUP BY s.staff_id, s.first_name, s.last_name, c.city, co.country;

select * from staffrevenueview;



#16. Create a view based on rental information consisting of visiting_day, customer_name, the title of the film, no_of_rental_days, the amount paid by the customer along with the percentage of customer spending. (4 Marks)

CREATE VIEW RentalInfoView AS
SELECT
    DATE_FORMAT(r.rental_date, '%Y-%m-%d') AS visiting_day,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    f.title AS film_title,
    DATEDIFF(r.return_date, r.rental_date) AS no_of_rental_days,
    p.amount,
    (p.amount / (SELECT SUM(amount) FROM Payment WHERE customer_id = c.customer_id)) * 100 AS spending_percentage
FROM Rental r
JOIN Customer c ON r.customer_id = c.customer_id
JOIN Payment p ON r.rental_id = p.rental_id
JOIN Inventory i ON r.inventory_id = i.inventory_id
JOIN Film f ON i.film_id = f.film_id;

select * from rentalinfoview;

#17. Display the customers who paid 50% of their total rental costs within one day.

SELECT c.customer_id,CONCAT(c.first_name, ' ', c.last_name) AS customer_name,r.rental_id,r.rental_date,r.return_date,p.amount AS total_payment,r.return_date - r.rental_date AS rental_duration,p.amount / (DATEDIFF(r.return_date, r.rental_date) + 1) AS daily_payment
FROM rental r
JOIN customer c ON r.customer_id = c.customer_id
JOIN payment p ON r.rental_id = p.rental_id
WHERE p.amount >= 0.5 * (SELECT SUM(p2.amount) FROM payment p2 WHERE p2.customer_id = c.customer_id)
AND DATEDIFF(r.return_date, r.rental_date) = 0;




